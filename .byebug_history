continue
'%.2f' % @sales_tax
@sales_tax.to_f(2)
@sales_tax.to_f
@sales_tax.to_d
@sales_tax
continue
@product
continue
response
continue
@products_info.join(' \n ')
@products_info.join(' n ')
@products_info.join(' \n ')
@products_info.join(' \n ').gsub("," "\n")
@products_info.join(', ').gsub("," "\n")
@products_info.join(', ')
@products_info.to_sentence
@products_info.to_s.gsub("[", "").gsub("]", "")
@products_info.to_s
@products_info
continue
data
continue
data
continue
data
continue
data
continue
response
continue
response
continue
response
exit
continue
(((self * 10) + (1 - (self * 10).modulo(1)) / 10) / 10).round(2)
(((self * 10) + (1 - (self * 10).modulo(1)) / 10) / 10).round(3)
(((self * 10) + (1 - (self * 10).modulo(1)) / 10) / 10)
(((self * 10) + (1 - (self * 10).modulo(1))) / 10).ro
(((self * 10) + (1 - (self * 10).modulo(1)) / 10) / 10)
(1 - (self * 10).modulo(1)) / 10
(1 - (self * 10).modulo(1))
(self * 10)
(self * 10).modulo(1) <= 1
(self * 10).modulo(1) >= 0.5
(self * 10).modulo(1)
(self * 10).modulo(1) < 0.5
self * 10
self
(self * 10).modulo(1)
self.to_s.split('.').last.size > 2
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
@product
@total
final_price.round_to_half
@product
continue
final_price.round_to_half
continue
final_price.round_to_half
continue
@total
final_price.round_to_half
continue
@total
final_price.round_to_half
continue
@total
final_price.round_to_half
continue
products
exit
continue
(3 * (@product.price * 5/100)) + (3 * @product.price)
@product.price * 5/100
@product.price
((3 * @product.price) * 5/100) + (3 * @product.price)
(3 * @product.price) * 5/100 + 3 * @product.price
(3 * @product.price) * 5/100
3 * (@product.price + @importation_tax)
@product.price + @importation_tax
@normal_tax
@importation_tax
@product.price
final_price
continue
self
continue
@importation_tax
continue
@product.amount
@product.price
@normal_tax
@importation_tax
continue
(1 - (self * 10).modulo(1)) / 10
1 - (self * 10).modulo(1)
1 - (self * 10).modulo(1).round(3)
(self * 10).modulo(1).round(3)
1 - (self * 10).modulo(1)
(self * 10).modulo(1)
(self * 100).modulo(1)
0.9 - (self * 100).modulo(1)
1 - (self * 100).modulo(1)
1 - (self * 10).modulo(1)
(self * 10)
(self * 100)
1 - (self * 10).modulo(1)
(self * 10)
1 - (self * 10).modulo(1)
1 - (self * 10)
1 - (self * 10).modulo(1)
1 - (self * 100).modulo(1)
1 - (self * 10).modulo(1)
1 - (self * 10).modulo(1))
(self * 10)
self * 10
((self * 10) + (1 - (self * 10).modulo(1)))
((self * 10) + (1 - (self * 10).modulo(1))) / 10
(1 - (self * 10).modulo(1)).round(2)
1 - (self * 10).modulo(1)
1 - (self * 10).modulo(1).round(3)
1 - (self * 10).modulo(1).round(2)
1 - (self * 10).modulo(1).round(1)
1 - (self * 10).modulo(1).round(2)
1 - (self * 10).modulo(1)
1 - (self * 10).modulo(1))
(self * 10).modulo(1).round(2)
(self * 10).modulo(1)
(self * 10).modulo(1).round(2)
(self * 10).modulo(1).round(3)
(self * 10).modulo(1)
(self * 10)
self
continue
self.to_s.split('.').last.size
(self * 10).modulo(1)
(self * 10)
(self * 10).modulo(1)
self
continue
((self * 10) + (1 - (self * 10).modulo(1))) / 10
0.5 - (self * 10).modulo(1)
(self * 10).modulo(1)
(self * 10)
((self * 10) + 0.5 - (self * 10).modulo(1)) / 10
0.5 - (self * 10).modulo(1)
((self * 10) + 0.5 - (self * 10).modulo(1)) / 10
((self * 10) + 0.5 - (self * 10).modulo(1)) * 10
((self * 10) + 0.5 - (self * 10).modulo(1)) / 10
(self * 10) + 0.5 - (self * 10).modulo(1)
(self * 10)
0.5 - (self * 10).modulo(1)
5 - (self * 10).modulo(1)
(self * 10).modulo(1)
(self * 10).modulo(1) < 0.5
(self * 10).modulo(1)
(self * 10)
self
(self * 10)
(self * 10).modulo(1)
(self * 10).modulo(1)[0]
(self * 10).modulo(1)
(self * 10).modulo(1).slice(".")
(self * 10).modulo(1)
(self * 10)
self * 10
self
continue
num.modulo(1).round(3) <= 5
num.modulo(1).round(3)
num.modulo(1)
num
((num * 10).round(3) + (num * 10).modulo(1))
(num * 10).round(3)
(num * 10)
((num * 10) + (num * 10).modulo(1)) / 10
num = self.round(3)
self.round(2)
self.round(3)
self
continue
self
continue
((num * 10) + (num * 10).modulo(1)) / 10
num = self.round(3)
((num * 10) + (num * 10).modulo(1)) / 10
self
continue
coninue
(num * 10).round(1)
(num * 10).round(2)
(num * 10)
num
((num * 10) + (num * 10).modulo(1))
((num * 10) + (num * 10).modulo(1)) / 10
((num * 10) + (num * 10).modulo(1))
((num * 10))
self
self.round(3)
self
((num * 10) + (num * 10).modulo(1))
((num * 10) + (num * 10))
((num * 10))
((num * 10) + (num * 10).modulo(1).round(2)) / 10
((num * 10) + (num * 10).modulo(1).round(3)) / 10
num = self.round(3)
continue
self.modulo(1).round(3)
self.modulo(1)
self.modulo(1).round(3)
self.modulo(1).round(3) * 10
self.modulo(1).round(3)
self.modulo(1).round(3).count
self.modulo(1).round(3)
self.modulo(1).round(2)
self.modulo(1)
self.modulo(2)
self.modulo(1)
self
continue
((num * 10) + (num * 10).modulo(1)) / 10
num = self.round(3)
self.round(3)
self.round(2)
self.round(1)
self.round(4)
self.round(3)
self
continue
self.round(3)
self.round(2)
self.round(4)
self.round(3)
(self * 10).modulo(1)
(self * 10)
continue
(self * 10)
continue
final_price
final_price.round_to_half
final_price.round(2)
final_price.to_f(2)
